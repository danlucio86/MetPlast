#' @param x
#' @description It performs internal metabolic diversity divergence (HRj) calculations.
#'
#' @details
#' Performs an internal calculation necessary to obtained the metabolic diversity divergence (HRj).
#'
#' @author Lucio D'Andrea, PhD; Prof Aureliano Bombarely
#'
#' @return It returns a value with the HRj value per sample
HRj_fc <- function(x){
Pij <- Pij_fc (Data)
n_samples <- ncol(Data)
Pi <- (1/n_samples)*(apply (Pij, MARGIN=1, FUN=sum))
-sum(x*log2(Pi))
}
#' Metabolite Specialization internal function
#'
#' @param x
#' @description It performs internal metabolite specialization (Si) calculations.
#'
#' @details
#' Performs an internal calculation necessary to obtained the metabolite specialization (Si).
#'
#' @author Lucio D'Andrea, PhD; Prof Aureliano Bombarely
#'
#' @return It returns a value with the Si value per metabolite (i)
Si_fc <- function(x){n_samples <- ncol(Data)
(1/n_samples)*(sum(x*log2(x), na.rm =TRUE))}
#' Number of detected compounds function
#'
#' @param x
#' @description It counts the number of detected compounds per sample
#'
#' @details
#' It counts the number of compound per sample that have a value higher to the mininum.
#' Initially, NA values are replaced by the minimum value of the whole data set divided by 1000000.
#' Thus, the function considers the minimum value of the corrected data set as a NA in the original data set (i.e. absence of the compound)
#'
#' @author Lucio D'Andrea, PhD; Prof Aureliano Bombarely
#'
#' @return It returns a vector with the number of peaks - e.g. detected compounds - per species.
numb_peaks_fc <- function(Data) {min_data <- min(Data)
Data_numb_peaks <- apply(Data, MARGIN = 2, FUN = function(x){x != min_data})
numb_peaks <- apply (Data_numb_peaks, MARGIN = 2, FUN = sum)}
#' Metabolite contribution to metabolome specialization index (δj) function
#'
#' @param Dj_index_weight
#' @description It selects the metabolites that contribute the most to the metabolome specialization index (δj) - i.e. highest Pij*Si
#'
#' @details
#' Metabolite contribution to metabolome specialization index (δj) function select the metabolite with the highest Pij*Si value per samples (i.e. species).
#'
#' @author Lucio D'Andrea, PhD; Prof Aureliano Bombarely
#'
#' @return It returns a table
my_filter_fc <- function(Dj_index_weight) {
Dj_index_weight %>%
group_by(Sample) %>%
filter(Pij_Si == max (Pij_Si))
}
exists("Pij_fc", where="MetPlast")
exists("Pij_fc")
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
library(MetPlast)
MetDiv_df <- MetDiv (Data)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
exists("Pij_fc")
exists(Pij_fc)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_df <- MetDiv (Data)
exists("Pij_fc") == FALSE
library(MetPlast)
MetDiv_df <- MetDiv (Data)
knitr::opts_chunk$set(echo = TRUE)
print(head((MetDiv_df)))
MetDiv_df <- MetDiv (Data)
exists(merge)
exists("merge")
exists("Pij_fc") == FALSE""
exists("Pij_fc") == "FALSE"
library(MetPlast)
MetDiv_df <- MetDiv (Data)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_df <- MetDiv (Data)
MetDiv_df <- MetDiv (Data)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_df <- MetDiv (Data)
dewtoo
devtools::document()
rm(list = c("Dj_index", "Dj_index_plot", "Hj_fc", "HRj_fc", "MetDiv", "MetDiv_plot", "MetDiv_Supp_plot", "my_filter_fc", "numb_peaks_fc", "Pij_by_Pi_fc", "Pij_fc", "Si_fc", "Si_index", "Si_index_plot"))
devtools::document()
MetDiv_df <- MetDiv (Data)
print(head((MetDiv_df)))
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
devtools::document()
library(MetPlast)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = "Hj")
knitr::opts_chunk$set(echo = TRUE)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
devtools::document()
library(MetPlast)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = "Hj")
knitr::opts_chunk$set(echo = TRUE)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
devtools::document()
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
devtools::document()
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
plot(MetDiv_plot)
devtools::document()
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = "Hj")
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = "Hj")
plot(MetDiv_Supp_plot)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
plot(MetDiv_Supp_plot)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
plot(MetDiv_Supp_plot)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
devtools::document()
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
plot(MetDiv_Supp_plot)
devtools::document()
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
plot(MetDiv_Supp_plot)
MetDiv_Supp_plot <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
plot(MetDiv_Supp_plot)
MetDiv_Supp_plot_1 <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
MetDiv_Supp_plot_2 <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Sample)
p<-grid(MetDiv_Supp_plot_1, MetDiv_Supp_plot_2)
MetDiv_Supp_plot_1 <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
MetDiv_Supp_plot_2 <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Sample)
p<-grid.arrange(MetDiv_Supp_plot_1, MetDiv_Supp_plot_2)
print(p)
categories <- read.csv2(file="categories.csv")
Data_categ <- cbind (MetDiv_df, categories)
ggplot(Data_categ, aes(numb_peaks, Samples, color = Categories)) + geom_point() + theme(legend.position = "none")
Data_categ
View(Data_categ)
ggplot(Data_categ, aes(Hj, Sample, color = Categories)) + geom_point() + theme(legend.position = "none")
Si_df <- Si_index(Data)
library(MetPlast)
Si_df <- Si_index(Data)
knitr::opts_chunk$set(echo = TRUE)
print(head((Si_df)))
Si_plot <- Si_index_plot(Si_df = Si_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Si_plot <- Si_index_plot(Si_df = Si_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Si_plot <- Si_index_plot(Si_df = Si_df)
plot(Si_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Dj_df <- Dj_index(Data = Data)
print(head((Dj_df)))
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
devtools::document()
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
library(MetPlast)
plot(Dj_plot)
knitr::opts_chunk$set(echo = TRUE)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
library(MetPlast)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
knitr::opts_chunk$set(echo = TRUE)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
Dj_categ <- cbind (Dj_df, categories)
ggplot(Dj_categ, aes(Dj, Sample, color = Categories)) + geom_point() + theme(legend.position = "none")
ggplot(Dj_categ, aes(Dj, Sample, color = Categories)) + geom_point()
ggplot(Dj_categ, aes(Dj, Sample, color = Categories)) + geom_point() + theme(legend.position = "none")
ggplot(Dj_categ, aes(Dj, Sample, color = Categories)) + geom_point() + theme(legend.position = "top")
ggplot(Dj_categ, aes(Dj, Sample, color = Categories)) + geom_point() + theme(legend.position = "none")
Dj_index_weight <- Dj_index_weight(Data = Data, Si_df = Si_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Dj_index_weight <- Dj_index_weight(Data = Data, Si_df = Si_df)
print(head((Dj_index_weight))
print(head((Dj_index_weight)))
Dj_weight_plot <- Dj_index_weight_plot(Dj_weight_df = Dj_weight_df)
Dj_weight_plot <- Dj_index_weight_plot(Dj_weight_df = Dj_weight_df)
Dj_weight_plot <- Dj_index_weight_plot(Dj_weight_df = Dj_weight_df)
Dj_weight_plot <- Dj_index_weight_plot(Dj_weight_df = "Dj_weight_df")
library(MetPlast)
Dj_weight_plot <- Dj_index_weight_plot ()
knitr::opts_chunk$set(echo = TRUE)
Dj_weight_plot <- Dj_index_weight_plot ()
Dj_weight_plot <- Dj_index_weight_plot ()
Dj_weight_df <- Dj_index_weight(Data = Data, Si_df = Si_df)
Dj_weight_plot <- Dj_index_weight_plot (Dj_weight_df = Dj_weight_df)
Dj_weight_plot <- Dj_index_weight_plot (Dj_weight_df = Dj_weight_df)
plot(Dj_weight_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Dj_weight_plot <- Dj_index_weight_plot (Dj_weight_df = Dj_weight_df)
plot(Dj_weight_plot)
Dj_weight_plot <- Dj_index_weight_plot (Dj_weight_df = Dj_weight_df)
plot(Dj_weight_plot)
library(MetPlast)
devtools::document()
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetStats(Data = Data, MetDiv_df= MetDiv_df)
print(head((Stats)))
Stats <- MetStats(Data = Data, MetDiv_df= MetDiv_df)
print(head((Stats)))
MetPar <- MetPar_df(Stats_df = Stats, Dj_df = Dj_df)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetPar <- MetPar_df(Stats_df = Stats, Dj_df = Dj_df)
print(head((MetPar_df)))
# Statistical Analysis
## ANOVA analysis
library (ggpubr)
compare_means(Hj ~ Samples, data = MetPar_df)
# Statistical Analysis
## ANOVA analysis
library (ggpubr)
compare_means(Hj ~ Sample, data = MetPar_df)
# Statistical Analysis
## ANOVA analysis
library (ggpubr)
compare_means(Hj ~ Sample, data = MetPar_df)
library (ggpubr)
compare_means(Hj ~ Sample, data = MetPar_df)
print(head((MetPar_df)))
MetPar <- MetPar_df(Stats_df = Stats, Dj_df = Dj_df)
print(head((MetPar)))
# Statistical Analysis
## ANOVA analysis
library (ggpubr)
compare_means(Hj ~ Sample, data = MetPar)
compare_means(Dj ~ Sample, data = MetPar)
# Statistical Analysis
## ANOVA analysis
library (ggpubr)
compare_means(Hj ~ Sample, data = MetPar)
compare_means(Dj ~ Sample, data = MetPar)
MetPar_plot(MetPar_df = MetPar, x_element = Hj)
Dj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Hj)
plot(Dj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj)
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
library(MetPlast)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
knitr::opts_chunk$set(echo = TRUE)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line == "TRUE")
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
devtools::document()
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
MetPar_plot(MetPar, x_element = Divj, ref_line = TRUE)
MetPar_plot <- function (MetPar_df, x_element, ref_line) {
#mssg
if(ref_line != TRUE) {
print("DEFAULT, ref_line=FALSE. Please, for x=y reference line, select = TRUE")
}
#Warnings
if (is.data.frame(MetPar_df) == FALSE) {
warning('MetPar_plot functions takes MetPar_df as argument a data frame')
}
if (hasArg(x_element) == FALSE) {
warning('Please, provide y element: Hj, Divj, Sample')
}
#Stops
if (hasArg(MetPar_df) == FALSE) {
stop('MetPar_df should be provided. Please, run and store MetPar_df(). MetPar_df <- MetPar_df()')
}
p <- ggplot2::ggplot(MetPar_df, aes(x={{ x_element }}, y = .data[["Dj"]], color =.data[["Sample"]])) + geom_point()
if(ref_line == "TRUE") {p = p + expand_limits(x = 0, y = 0) + geom_abline(slope=1, intercept=0)
}
print (p)
}
MetPar_plot(MetPar, x_element = Divj, ref_line = TRUE)
library(MetPlast)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
knitr::opts_chunk$set(echo = TRUE)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = "TRUE")
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
plot(Divj_vs_Hj_plot)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
plot(MetDiv_plot)
MetDiv_pipe(Data)
library(MetPlast)
MetDiv_pipe(Data)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetSpec <- MetSpec_pipe(Data)
MetliteSpec_pipe <- MetliteSpec_pipe(Data = Data)
library(MetPlast)
MetliteSpec_pipe <- MetliteSpec_pipe(Data = Data)
library(MetPlast)
knitr::opts_chunk$set(echo = TRUE)
MetliteSpec_pipe <- MetliteSpec_pipe(Data = Data)
knitr::opts_chunk$set(echo = TRUE)
MetPar_pipe <- MetPar_pipe(Stats_df = Stats, Dj_df = Dj_df)
devtools::document()
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
MetDiv_plot <- MetDiv_plot(MetDiv_df =  MetDiv_df)
print(MetDiv_plot)
MetDiv_Supp_plot_1 <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Hj)
plot(MetDiv_Supp_plot_1)
MetDiv_Supp_plot_2 <- MetDiv_Supp_plot(MetDiv_df = MetDiv_df, y_element = Sample)
print(MetDiv_Supp_plot_2)
Si_plot <- Si_index_plot(Si_df = Si_df)
plot(Si_plot)
Dj_plot <- Dj_index_plot(Dj_df = Dj_df)
plot(Dj_plot)
Dj_weight_plot <- Dj_index_weight_plot (Dj_weight_df = Dj_weight_df)
plot(Dj_weight_plot)
Dj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Hj)
Dj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Hj, ref_line = "FALSE")
plot(Dj_vs_Hj_plot)
Dj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Hj, ref_line = "FALSE")
Divj_vs_Hj_plot <- MetPar_plot(MetPar_df = MetPar, x_element = Divj, ref_line = TRUE)
devtools::check()
devtools::check()
library(MetPlast)
detach("package:MetPlast", unload = TRUE)
search()
devtools::document()
rm(list = c("MetPar_plot"))
devtools::document()
library(MetPlast)
devtools::document()
library(MetPlast)
devtools::check()
devtools::document()
library(MetPlast)
devtools::check()
globalVariables(c("%>%", ".data", "Compound", "Data", "Divj", "Dj", "Hj", "Pij_Si", "Sample", "aes", "geom_boxplot", "geom_point", "geom_text", "ggplot", "grid.arrange", "group_by", "hasArg", "pivot_longer", "setDT", "theme"))
devtools::check()
utils::globalVariables(c("%>%", ".data", "Compound", "Data", "Divj", "Dj", "Hj", "Pij_Si", "Sample", "aes", "geom_boxplot", "geom_point", "geom_text", "ggplot", "grid.arrange", "group_by", "hasArg", "pivot_longer", "setDT", "theme"))
devtools::document()
devtools::check()
library(MetPlast)
devtools::check()
R CMD check --help
help(devtools::check)
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::document()
devtools::check(args = "--no-examples")
?globalVariables
utils::globalVariables(c("%>%", ".data", "Compound", "Data", "Divj", "Dj", "Hj", "Pij_Si", "Sample", "aes", "geom_boxplot", "geom_point", "geom_text", "ggplot", "grid.arrange", "group_by", "hasArg", "pivot_longer", "setDT", "theme"), add=TRUE)
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::document()
devtools::document()
devtools::document()
library(MetPlast)
devtools::document()
devtools::document()
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::check(args = "--no-examples")
devtools::document()
library(MetPlast)
devtools::check(args = "--no-examples")
devtools::document()
library(MetPlast)
devtools::check(args = "--no-examples")
devtools::document()
library(MetPlast)
devtools::check(args = "--no-examples")
devtools::document()
devtools::document()
devtools::document()
library(MetPlast)
devtools::document()
devtools::document()
library(MetPlast)
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::document()
devtools::check(args = "--no-examples")
devtools::document()
devtools::document()
devtools::document()
library(MetPlast)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(MetPlast)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(MetPlast)
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::document()
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::document()
devtools::check(args = "--no-examples")
library(MetPlast)
devtools::document()
devtools::check(args = "--no-examples")
?tools::undoc
tools::undoc(MetPlast)
tools::undoc("MetPlast")
tools::undoc()
tools::undoc()
tools::undoc("MetPlast")
devtools::check(args = "--no-examples")
check_doc()
devtool::check_doc()
devtools::check_doc()
devtools::check_doc()
devtools
?devtools
devtools::check_doc()
?devtools::check()
devtools::check_man()
library(MetPlast)
devtools::document()
